<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
        PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
    <!-- General description of your web application -->

    <display-name>GraphQL card game</display-name>
    <description>
        This is a card-game that players fight each other
        by "casting" graphQL queries.
    </description>


    <!-- Context initialization parameters that define shared
         String constants used within your application, which
         can be customized by the system administrator who is
         installing your application.  The values actually
         assigned to these parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletContext().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of context initialization
         parameters, including zero.
    -->

    <context-param>
        <param-name>webmaster</param-name>
        <param-value>alkismavridis@gmail.com</param-value>
        <description>
        </description>
    </context-param>


    <!-- GraphqlCardGameServlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a servlet-mapping element) is recommended.

         GraphqlCardGameServlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->

    <servlet>
        <servlet-name>MainApp</servlet-name>
        <description>
            This servlet plays the "controller" role in the MVC architecture
            used in this application.  It is generally mapped to the ".do"
            filename extension with a servlet-mapping element, and all form
            submits in the app will be submitted to a request URI like
            "saveCustomer.do", which will therefore be mapped to this servlet.

            The initialization parameter names for this servlet are the
            "servlet path" that will be received by this servlet (after the
            filename extension is removed).  The corresponding value is the
            name of the action class that will be used to process this request.
        </description>
        <servlet-class>eu.mojo.graphqlcard.container.GraphqlCardGameServlet</servlet-class>
        <!-- Load this servlet at server startup time -->
        <load-on-startup>5</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>MainApp</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- Define the default session timeout for your application,
         in minutes.  From a servlet or JSP page, you can modify
         the timeout for a particular session dynamically by using
         HttpSession.getMaxInactiveInterval(). -->

    <session-config>
        <session-timeout>30</session-timeout>    <!-- 30 minutes -->
    </session-config>


</web-app>